#number of open positions in Germany
#length of open positions on website - calculated days: access date minus day of posting
#sector
#FT/PT
#company size
#company postcode: add zero to 4 digit postcodes
#rural/ urban marker: definition rural/ urban
#optional: skill per sector; topics per sector; skill level; open jobs per sector; remote working options

import pandas as pd
data = pd.read_csv('all_jobs.csv')
df=pd.DataFrame(data)
df.head(10)

#PREPROCESSING:
#add zero to 4 digit postcodes
df['postcode_5_digits'] = df['arbeitsort.plz'].apply(lambda x: str(x).zfill(5))
#add timestamp of access minus today in number of days
df['days_since_posting'] =  (pd.to_datetime('today') -pd.to_datetime(df['aktuelleVeroeffentlichungsdatum'])).min().days


# #add column with rural/ urban marker: definition rural/ urban

# #add column with company size


#SQL queries

# #number of open positions in Germany

# def number_open_positions(db):
#     query = "SELECT COUNT(*)FROM df"
#     result = sqldf(query, globals())
#     return result
# print(result)


# def company_postcode(db):
#    query = "SELECT arbeitsort.plz, COUNT(arbeitsort.plz) FROM df GROUP BY arbeitsort.plz"
#    result = sqldf(query, globals())
#    return result
# print(result)
